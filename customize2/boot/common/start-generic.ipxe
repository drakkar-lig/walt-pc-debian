#!ipxe
# This is provided by iPXE, extracted from BIOS information.
set node_submodel ${manufacturer}/${product}
echo Walt node model: ${node_model}
echo Walt node submodel: ${node_submodel}

# Default value for variables (may be overriden by custom ipxe script)
set walt_init /bin/walt-init
# Interface name within the booted OS on which netconsole should send logs
set netconsole_iface eth0
# Custom kernel parameters directly passed to the kernel command line (useful for serial console)
set additional_kernel_params
# Server mac address (useful for netconsole)
set server_mac

# Load server info (mac address) stored as an ipxe script
echo Loading server ipxe script for server conf vars
# note: without imgfree, later boot stages may fail
chain ${urlprefix}/server-params.ipxe && imgfree server-params.ipxe ||

# Load custom ipxe scripts: model, then submodel.
echo Loading custom ipxe scripts from Walt image
# imgfree is necessary, otherwise the loaded ipxe script corrupts the memory of the initrd.
chain ${urlprefix}/boot-params.ipxe && imgfree boot-params.ipxe ||
chain ${urlprefix}/${node_submodel}/boot-params.ipxe && imgfree boot-params.ipxe ||

# compute walt bootargs
set walt_bootargs walt.node.model=${node_model} walt.server.ip=${next-server}

# For now, Walt's logging module (NetconsoleListener) does not know
# how to decode the extended format from netconsole. We should enable
# the extended format ("netconsole=+1234...") when this is the case,
# because it will allow proper handling of continuation lines.
# References:
# https://www.kernel.org/doc/Documentation/networking/netconsole.txt
# https://www.kernel.org/doc/Documentation/ABI/testing/dev-kmsg
set netconsole_bootargs netconsole=1234@${ip}/${netconsole_iface},12342@${next-server}/${server_mac}

# uncomment the console mode you wish
# (for best performance, keep variable empty)
#set console_bootargs ${netconsole_bootargs}
#set console_bootargs console=ttyS0,115200
set console_bootargs

# IP conf: we reuse the DHCP info obtained by the 1st-stage script.
# Note however that we don't know about the network interface name,
# so this would normally still trigger autoconf if machine has several
# interfaces. That is why we use the BOOTIF parameter too.
# BOOTIF is usually set by pxelinux and indicates the MAC address of the
# interface used to boot, and it is understood by Debian's initrd scripts.
# We use the same syntax as pxelinux to be compatible.
set ip_param ip=${ip}:${next-server}:${gateway}:${netmask}:${hostname}::off
set ip_conf ${ip_param} BOOTIF=01-${mac:hexhyp}

set other_bootargs init=${walt_init} panic=30 ${ip_conf}

set bootargs ${fs_bootargs} ${walt_bootargs} ${console_bootargs} ${other_bootargs} ${additional_kernel_params}

echo Loading initrd...
initrd ${urlprefix}/initrd || echo No initrd found

echo Loading kernel...
kernel ${urlprefix}/kernel initrd=initrd ${bootargs} || reboot

# boot
echo Booting kernel with parameters: ${bootargs}
boot
